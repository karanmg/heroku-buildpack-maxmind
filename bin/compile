#!/usr/bin/env ruby

require 'date'
require 'net/http'

# Exit if any command fails
def exit_on_failure
  yield
rescue => e
  puts e.message
  exit 1
end

def download(edition, maxmind_key, cache_dir, build_dir)
  log "Downloading #{edition}"
  url = "https://download.maxmind.com/app/geoip_download?edition_id=#{edition}&suffix=tar.gz&license_key=#{maxmind_key}"
  tar = File.join(cache_dir, "#{edition}.tar.gz")
  tar_new = File.join(cache_dir, "#{edition}-new.tar.gz")
  db = File.join(cache_dir, "#{edition}.mmdb")

  newer_version = false

  if File.exist?(tar)
    log "#{edition}: Checking for newer version of the TAR file on the server"
    uri = URI(url)
    response = Net::HTTP.get_response(uri)

    if response.code != '200'
      log "WARNING #{edition}: Unable to reach Maxmind, received: #{response.code}"
    else
      modified = response['last-modified']
      log "#{edition}: modified #{modified}"
      remote_ctime = DateTime.parse(modified).to_time.to_i
      local_ctime = File.mtime(tar).to_i

      newer_version = local_ctime < remote_ctime
    end
  end

  if !File.exist?(tar) || newer_version
    log "#{edition}: #{newer_version ? 'Found newer version of the TAR file on the server, downloading.' : 'Database does not exist in cache, downloading.'}"
    File.write(tar_new, Net::HTTP.get(URI(url)))
  else
    log "#{edition}: Database already exists in cache and it's up to date."
    tar_new = tar
  end

  log "#{edition}: Extracting #{tar_new} to #{cache_dir}"
  system("tar -zxvf #{tar_new} -C #{cache_dir} --no-anchored --strip-components=1 #{edition}.mmdb")

  if $?.exitstatus != 0
    if newer_version
      log "WARNING #{edition}: Could not download TAR file! Using old cached version."
    else
      log "ERROR #{edition}: Could not download TAR file! Cannot continue!!!"
      exit 1
    end
  end

  # output = File.join(build_dir, edition)
  output = File.join(cache_dir, edition)
  log "#{edition}: Moving #{db} to #{output}"
  File.rename(db, output)
  log "#{edition}: Moving #{tar_new} to #{tar}"
  File.rename(tar_new, tar) rescue nil

  log File.exist?(output) ? "#{edition}: Database file available at #{output}" : "#{edition}: Database file NOT available at #{output}"
  log File.exist?("#{output}.mmdb") ? "#{edition}: Database file available at #{output}.mmdb" : "#{edition}: Database file NOT available at #{output}.mmdb"
  log File.exist?("#{output}/GeoLite2-City.mmdb") ? "#{edition}: Database file available at #{output}/GeoLite2-City.mmdb" : "#{edition}: Database file NOT available at #{output}/GeoLite2-City.mmdb"

  log "#{edition}: DONE. DB file available at #{output}"
end

def log(message)
  puts "-----> [MaxMind Buildpack] #{message}"
end

log "starting"

build_dir = ARGV[0]
cache_dir = ARGV[1]
env_dir   = ARGV[2]

log "build_dir  => #{build_dir}"
log "cache_dir  => #{cache_dir}"
log "env_dir    => #{env_dir}"

maxmind_key_path = File.join(env_dir, 'MAXMIND_KEY')
unless File.exist?(maxmind_key_path)
  log "You must define the environment variable MAXMIND_KEY with your license key."
  exit 1
end

maxmind_key = File.read(maxmind_key_path).strip
maxmind_editions = File.read(File.join(env_dir, 'MAXMIND_EDITIONS')).strip

log "Creating cache dir [#{cache_dir}] (if it doesn't exist)"
Dir.mkdir(cache_dir) unless Dir.exist?(cache_dir)

log "Download editions => #{maxmind_editions}"
editions = maxmind_editions.split(', ')

editions.each do |edition|
  exit_on_failure do
    log "Starting download edition => #{edition}"
    download(edition, maxmind_key, cache_dir, build_dir)
  end
end