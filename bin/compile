#!/usr/bin/env ruby

require 'date'
require 'net/http'

# Exit if any command fails
def exit_on_failure
  yield
rescue => e
  puts e.message
  exit 1
end

build_dir = ARGV[0]
cache_dir = ARGV[1]
env_dir = ARGV[2]

maxmind_key_path = File.join(env_dir, 'MAXMIND_KEY')
unless File.exist?(maxmind_key_path)
  puts '-----> You must define the environment variable MAXMIND_KEY with your license key.'
  exit 1
end

maxmind_key = File.read(maxmind_key_path).strip
maxmind_editions = File.read(File.join(env_dir, 'MAXMIND_EDITIONS')).strip

Dir.mkdir(cache_dir) unless Dir.exist?(cache_dir)

# def download(edition, maxmind_key, cache_dir, build_dir)
#   url = "https://download.maxmind.com/app/geoip_download?edition_id=#{edition}&suffix=tar.gz&license_key=#{maxmind_key}"
#   tar = File.join(cache_dir, "#{edition}.tar.gz")
#   tar_new = File.join(cache_dir, "#{edition}-new.tar.gz")
#   db = File.join(cache_dir, "#{edition}.mmdb")

#   newer_version = false

#   if File.exist?(tar)
#     uri = URI(url)
#     response = Net::HTTP.get_response(uri)

#     if response.code != '200'
#       puts "WARNING #{edition}: Unable to reach Maxmind, received: #{response.code}"
#     else
#       modified = response['last-modified']
#       puts "-----> #{edition}: modified #{modified}"
#       remote_ctime = DateTime.parse(modified).to_time.to_i
#       local_ctime = File.mtime(tar).to_i

#       newer_version = local_ctime < remote_ctime
#     end
#   end

#   if !File.exist?(tar) || newer_version
#     puts "-----> #{edition}: #{newer_version ? 'Found newer version of the TAR file on the server, downloading.' : 'Database does not exist in cache, downloading.'}"
#     File.write(tar_new, Net::HTTP.get(URI(url)))
#   else
#     puts "-----> #{edition}: Database already exists in cache and it's up to date."
#     tar_new = tar
#   end

#   puts "-----> #{edition}: Extracting #{tar_new}"
#   system("tar -zxvf #{tar_new} -C #{cache_dir} --no-anchored --strip-components=1 #{edition}.mmdb")

#   if $?.exitstatus != 0
#     if newer_version
#       puts "-----> WARNING #{edition}: Could not download TAR file! Using old cached version."
#     else
#       puts "-----> ERROR #{edition}: Could not download TAR file! Cannot continue!!!"
#       exit 1
#     end
#   end

#   output = File.join(build_dir, edition)
#   puts "-----> #{edition}: Moving #{db} to #{output}"
#   File.rename(db, output)
#   File.rename(tar_new, tar) rescue nil
# end

editions = maxmind_editions.split(', ')

editions.each do |edition|
  exit_on_failure do
    # download(edition, maxmind_key, cache_dir, build_dir)
    puts "-----> #{edition}: Downloading #{edition}"
  end
end
